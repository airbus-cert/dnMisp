using dnMisp.Misc;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;

namespace dnMisp.Objects
{
    public class MispMalware
        : MispObject
    {
        public MispMalware(
            Stream fileStream,
            string filename,
            string comment = "",
            string path = null,
            List<(string name, string value, string comment)> additionalAttribute = null
            )
        {
            Name = "file";
            MetaCategory = "file";
            

            BinaryReader br = new BinaryReader(fileStream);
            fileStream.Seek(0, SeekOrigin.Begin);

            byte[] scriptBytes = br.ReadBytes((int)fileStream.Length);

            // Auto-computed
            var sha256 = Helper.GetHash<SHA256>(scriptBytes);
            var sha1 = Helper.GetHash<SHA1>(scriptBytes);
            var md5 = Helper.GetHash<MD5>(scriptBytes);
            

            // Required
            Attributes.Add(new Attribute("filename", "External analysis", filename) { ObjectRelation = "filename", DisableCorrelation = true });
            Attributes.Add(new Attribute("malware-sample", "External analysis", $"{filename}|{md5}") { ObjectRelation = "malware-sample", Data = Helper.ToBase64(fileStream), DisableCorrelation = false });


            Attributes.Add(new Attribute("sha256", "External analysis", sha256) { ObjectRelation = "sha256", DisableCorrelation = false });
            Attributes.Add(new Attribute("sha1", "External analysis", sha1) { ObjectRelation = "sha1", DisableCorrelation = false });
            Attributes.Add(new Attribute("md5", "External analysis", md5) { ObjectRelation = "md5", DisableCorrelation = false });

            // Optionals
            if (!string.IsNullOrWhiteSpace(path))
                Attributes.Add(new Attribute("text", "External analysis", path) { ObjectRelation = "path", DisableCorrelation = true });

            if (!string.IsNullOrWhiteSpace(comment))
                Attributes.Add(new Attribute("comment", "External analysis", comment) { ObjectRelation = "comment", DisableCorrelation = true });

            if (additionalAttribute != null)
                foreach (var v in additionalAttribute)
                {
                    if (!string.IsNullOrWhiteSpace(v.value))
                    {
                        Attributes.Add(new Attribute("pattern-in-file", "External analysis", $"{v.name}: {v.value}") { 
                            ObjectRelation = "pattern-in-file", 
                            DisableCorrelation = true,
                            Comment = v.comment
                        });
                    }
                }


        }
    }
}
